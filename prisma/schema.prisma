  generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  cpf       String   @id @unique
  name      String
  email     String   @unique
  phone     String   @unique
  password  String 
}

model Student {
  cpf                 String   @id @unique
  name                String
  email               String   @unique
  phone               String   @unique
  password            String
  studentRegistration String   @unique
  bankName            String
  bankAccount         String   @unique
  bankAgency          String
  researchGrant       String
  projects            ProjectStudent[]
  payments            Payment[]    @relation("StudentPayments")
  checkins            Checkin[]  @relation("StudentCheckins")
}

model Advisor {
  cpf                  String      @id @unique
  name                 String
  email                String      @unique
  phone                String      @unique
  password             String
  advisorRegistration  String      @unique
  projects             Project[]   @relation("AdvisorProjects")
  feedbacks            Feedback[]        @relation("AdvisorFeedbacks")
}

model Project {
  id                      String           @id @unique
  name                    String   
  description             String
  startDate               DateTime
  endDate                 DateTime
  status                  ProjectStatus
  scholarshipValue        Float
  advisorCpf              String
  advisor                 Advisor          @relation("AdvisorProjects", fields: [advisorCpf], references: [cpf], onDelete: Cascade)
  scholarshipStudent      ProjectStudent[]
  checkins                Checkin[]         @relation("ProjectCheckins")    
}

model ProjectStudent {
  projectId               String
  scholarshipStudentCpf   String

  project                 Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scholarshipStudent      Student          @relation(fields: [scholarshipStudentCpf], references: [cpf], onDelete: Cascade)

  @@id([projectId, scholarshipStudentCpf])
}


enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
  SUSPENDED
  PENDING
  APPROVED
  REJECTED
}

model Payment{

  paymentId           String          @id @unique
  studentCPF          String
  student             Student         @relation("StudentPayments", fields: [studentCPF], references: [cpf])
  amount              Float
  dueDate             DateTime 
  processingDate      DateTime
  paymentStatus       PaymentStatus      
  receipt             String 
}
 
enum PaymentStatus {
    PENDING
    PROCESSED
    FAILED
    COMPLETED
}

model Checkin {
  id                 String      @id @unique
  dateCheckin        DateTime
  studentCpf         String
  projectId          String
  howLong            Float
  description        String
  feedback           Feedback?   @relation("CheckinFeedback")

  project            Project     @relation("ProjectCheckins", fields: [projectId], references: [id], onDelete: Cascade)
  student            Student     @relation("StudentCheckins", fields: [studentCpf], references: [cpf], onDelete: Cascade)
}

model Feedback {
  id             String     @id @unique
  checkinId      String     @unique
  advisorCpf     String     @unique
  comment        String
  feedbackDate   DateTime

  checkin       Checkin    @relation("CheckinFeedback", fields: [checkinId], references: [id], onDelete: Cascade)
  advisor       Advisor    @relation("AdvisorFeedbacks", fields: [advisorCpf], references: [cpf], onDelete: Cascade)
}